# Tail Performance Thresholds Configuration
# Phase 4B - Tail Observability Integration
# 
# These thresholds implement tail governance for HFT Redis performance
# Based on Phase 4A baseline measurements and GPT analysis recommendations
#
# Usage: source this file or load into environment before running tail monitoring
# Status: STAGED (warn-only, not enforced initially)

# =============================================================================
# TAIL LATENCY THRESHOLDS
# =============================================================================

# P99.9 Maximum RTT (microseconds)
# Current baseline: ~16μs, load stress: ~18μs
# Set with headroom above observed maximum
export P99_9_MAX_RTT=20

# Tail Span Maximum (P99.9 - P99, microseconds) 
# Current baseline: ~5.8μs, load stress: ~8μs
# Tail span is the primary HFT tail health indicator
export TAIL_SPAN_MAX_RTT=8

# Tail Burst Limit (number of extreme outliers per window)
# Define "extreme" as samples > (P99 + TAIL_BURST_DELTA_US)
# Conservative limit based on observed patterns
export TAIL_BURST_LIMIT=3

# Tail Burst Delta (microseconds)
# Threshold above P99 to classify as "burst outlier"
# Tuned from Phase 4A analysis
export TAIL_BURST_DELTA_US=6

# =============================================================================
# SAMPLING CONFIGURATION
# =============================================================================

# Tail sampling window size (minimum for reliable P99.9)
# GPT recommendation: ≥3000 samples, prefer 5000+
export TAIL_WINDOW_SIZE=5000

# Tail history retention (number of windows to keep)
# For trend analysis and offline debugging
export TAIL_HISTORY_RETENTION=48

# Tail sampling interval (seconds between windows)
# For continuous monitoring (0 = single window mode)
export TAIL_SAMPLING_INTERVAL=300

# =============================================================================
# CLASSIFICATION THRESHOLDS
# =============================================================================

# Context switch thresholds for SCHED classification
export TAIL_SCHED_NONVOL_THRESHOLD=10
export TAIL_SCHED_VOL_THRESHOLD=50

# Memory fault threshold for ALLOC classification  
export TAIL_ALLOC_FAULT_THRESHOLD=5
export TAIL_ALLOC_MEMORY_THRESHOLD=90

# CPU threshold for IRQ classification
export TAIL_IRQ_CPU_THRESHOLD=80

# =============================================================================
# GATE INTEGRATION (FUTURE)
# =============================================================================

# Enable tail awareness in performance gates (disabled initially)
# Stage 3: Enable warn-only tail checks
# Stage 5: Enable soft-fail on persistent tail breaches
export TAIL_GATE_ENABLED=false
export TAIL_GATE_WARN_ONLY=true

# Consecutive window threshold for gate escalation
# Require N consecutive failures before gate soft-fail
export TAIL_GATE_CONSECUTIVE_THRESHOLD=2

# =============================================================================
# MONITORING INTEGRATION
# =============================================================================

# Enable Prometheus textfile export (future)
export TAIL_PROMETHEUS_ENABLED=false
export TAIL_PROMETHEUS_FILE="/tmp/redis_tail_metrics.prom"

# Enable detailed logging for debugging
export TAIL_DEBUG_LOGGING=false

# =============================================================================
# CURRENT BASELINES (for reference)
# =============================================================================

# Phase 4A Measurement Results:
# - Loopback baseline: P99=10.17μs, P99.9=15.98μs, Tail Span=5.82μs
# - Cross-core test: P99=9.87μs, P99.9=18.48μs, Tail Span=8.62μs  
# - 10k QPS load: P99=10.01μs, P99.9=18.15μs, Tail Span=8.14μs
#
# Key insight: P99 stable (~10μs), P99.9 sensitive to load/scheduling (16-18μs)
# Tail span is primary indicator of system stress (5.8μs → 8+μs under load)

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Single tail window measurement:
# source tail-thresholds.env
# python3 extended_tail_sampler.py --interval 0

# Continuous tail monitoring (5-minute windows):
# source tail-thresholds.env  
# python3 extended_tail_sampler.py --interval 300

# Custom thresholds for testing:
# P99_9_MAX_RTT=15 TAIL_SPAN_MAX_RTT=6 python3 extended_tail_sampler.py

# View tail history:
# jq '.windows[-5:] | .[] | {p99, p99_9, tail_span, burst_count}' state/tail-run.json
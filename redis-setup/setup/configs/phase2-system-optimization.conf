# Phase 2 System Micro-Optimizations - Staging Configuration
# AI Trading Station HFT Performance Optimization
# Created: September 28, 2025
# Target: 5-15% latency improvement (10.71μs → 9.0-10.2μs RTT P99)

################################## PHASE 2 OVERVIEW ############################

# Objective: Reduce kernel-level timing jitter and system noise
# Approach: Conservative, incremental testing
# Risk Level: Medium (kernel parameter changes)
# Rollback: Full system restoration capability

################################## OPTIMIZATION 1: TIMER MIGRATION ############

# Current Status: Timer migration enabled (default)
# Target: Disable timer migration to prevent timing jitter
# Impact: Timers stay on original CPU, reducing migration overhead
# Risk: Low - commonly used in HFT systems

# Implementation:
# echo 0 > /proc/sys/kernel/timer_migration
# Persistent: kernel.timer_migration = 0 in sysctl

TIMER_MIGRATION_DISABLE=1

################################## OPTIMIZATION 2: CPU C-STATE MANAGEMENT #####

# Current Status: Deep C-states enabled (power saving)
# Target: Disable deep C-states on trading cores (2,3,4)
# Impact: Eliminates CPU wake-up latency from deep sleep
# Risk: Medium - increased power consumption

# Implementation for CPUs 2,3,4 (trading + Redis cores):
# echo 1 > /sys/devices/system/cpu/cpu2/cpuidle/state*/disable
# echo 1 > /sys/devices/system/cpu/cpu3/cpuidle/state*/disable  
# echo 1 > /sys/devices/system/cpu/cpu4/cpuidle/state*/disable

CPU_CSTATE_DISABLE=1
TARGET_CPUS="2 3 4"  # Trading cores (2,3) + Redis core (4)

################################## OPTIMIZATION 3: KERNEL TIMING NOISE ########

# Current Status: Default kernel timing parameters
# Target: Reduce background kernel timing interference
# Impact: Minimize non-critical kernel timing operations
# Risk: Low - well-tested parameters

# Kernel parameters to optimize:
# kernel.hung_task_timeout_secs = 0 (disable hung task detection)
# kernel.nmi_watchdog = 0 (disable NMI watchdog)
# kernel.watchdog = 0 (disable soft lockup detector)

KERNEL_NOISE_REDUCTION=1

################################## OPTIMIZATION 4: CONTEXT SWITCH REDUCTION ###

# Current Status: Default scheduler parameters
# Target: Minimize unnecessary context switches
# Impact: Reduce scheduler overhead on trading cores
# Risk: Low - scheduler tuning parameters

# Scheduler parameters:
# kernel.sched_migration_cost_ns = 5000000 (5ms - higher threshold)
# kernel.sched_min_granularity_ns = 10000000 (10ms - longer time slices)

CONTEXT_SWITCH_OPTIMIZATION=1

################################## IMPLEMENTATION PLAN #####################

# Phase 2a: Timer Migration (Test 1)
# - Disable timer migration
# - Measure: RTT P99, jitter, context switches
# - Expected: 1-3% improvement

# Phase 2b: C-State Management (Test 2) 
# - Disable deep C-states on trading cores
# - Measure: Wake-up latency, RTT consistency
# - Expected: 2-5% improvement

# Phase 2c: Kernel Noise Reduction (Test 3)
# - Reduce kernel timing interference
# - Measure: Background noise, timing jitter
# - Expected: 1-3% improvement

# Phase 2d: Context Switch Optimization (Test 4)
# - Optimize scheduler parameters
# - Measure: Context switch rate, latency
# - Expected: 1-4% improvement

################################## VALIDATION METRICS ####################

# Primary Metrics:
# - RTT P99: Target < 10.2μs (current: 10.71μs)
# - RTT Jitter: Target < 1.0μs (current: 1.02μs)
# - SET P99: Maintain ≤ 4μs (no regression)

# Secondary Metrics:
# - Context switches per second (perf stat)
# - Timer migration events (perf stat)
# - CPU wake-up latency (cyclictest)
# - System stability (uptime, no crashes)

################################## ROLLBACK TRIGGERS ####################

# Immediate rollback if:
# - Any metric regresses > 5%
# - System becomes unstable
# - Performance gate fails
# - Service disruption occurs

# Rollback procedure:
# 1. Restore original sysctl parameters
# 2. Re-enable C-states on all CPUs
# 3. Restart affected services
# 4. Validate system recovery

################################## RISK MITIGATION ###################

# Low Risk Changes:
# - Timer migration disable (well-tested)
# - Kernel noise reduction (conservative parameters)

# Medium Risk Changes:
# - C-state management (power vs performance trade-off)
# - Scheduler parameter changes (system-wide impact)

# Safety Measures:
# - Complete system backup before changes
# - Individual parameter testing
# - Automatic rollback on failure
# - Performance monitoring throughout

################################## EXPECTED RESULTS ##################

# Conservative Estimate:
# - RTT P99: 10.71μs → 9.5-10.2μs (5-10% improvement)
# - Jitter reduction: More consistent timing
# - System stability: Maintained or improved

# Optimistic Estimate:
# - RTT P99: 10.71μs → 9.0-9.5μs (10-15% improvement)
# - Significant jitter reduction
# - Enhanced deterministic behavior

# Success Criteria:
# - Minimum 5% RTT improvement
# - No performance regression in any metric
# - System remains stable
# - Performance gate continues to pass

################################## TOOLS REQUIRED ####################

# System Optimization Tools:
# - test-system-optimization-incremental.sh (to be created)
# - system-optimization-rollback.sh (to be created)
# - Phase 2 performance monitoring integration

# Monitoring Commands:
# - perf stat (context switches, timer migrations)
# - cyclictest (real-time latency testing)
# - redis-hft-monitor_to_json.sh (Redis performance)
# - perf-gate.sh (institutional compliance)

################################## END PHASE 2 CONFIG ##################
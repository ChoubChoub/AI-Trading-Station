#!/bin/bash
set -e

# 1. Detect NIC
NIC=$(ip route | awk '/default/ {print $5; exit}')
if [ -z "$NIC" ]; then
  echo "ERROR: No primary NIC (default route) found."
  exit 1
fi
echo "Primary NIC: $NIC"

if command -v ethtool >/dev/null 2>&1; then
  ethtool -i "$NIC"
else
  echo "ethtool not installed."
fi

# 2. Find IRQs
IRQS=$(grep "$NIC" /proc/interrupts | cut -d: -f1 | tr -d ' ')
if [ -z "$IRQS" ]; then
  IRQS=$(grep -E "${NIC}-.*|.*-${NIC}|.*TxRx.*|.*-rx-.*|.*-tx-.*" /proc/interrupts | cut -d: -f1 | tr -d ' ')
fi
if [ -z "$IRQS" ]; then
  echo "No IRQs found for $NIC"
  exit 1
fi

# 3. Check CPU cores
for core in 0 1; do
  if [ ! -d "/sys/devices/system/cpu/cpu$core" ]; then
    echo "ERROR: CPU core $core not found."
    exit 1
  fi
  if [ -f "/sys/devices/system/cpu/cpu$core/online" ]; then
    if [ "$(cat /sys/devices/system/cpu/cpu$core/online)" != "1" ]; then
      echo "ERROR: CPU core $core is offline."
      exit 1
    fi
  fi
done
echo "Cores 0 and 1 verified as available and online."

# 4. Set IRQ affinity
CORES=(0 1)
CORE_IDX=0
for IRQ in $IRQS; do
  MASK=$((1 << ${CORES[$CORE_IDX]}))
  HEXMASK=$(printf "%x" "$MASK")
  if [ -f "/proc/irq/$IRQ/smp_affinity" ]; then
    echo "$HEXMASK" > "/proc/irq/$IRQ/smp_affinity"
    echo "IRQ $IRQ assigned to core ${CORES[$CORE_IDX]} (mask $HEXMASK)"
  else
    echo "WARNING: /proc/irq/$IRQ/smp_affinity not found."
  fi
  CORE_IDX=$((1 - CORE_IDX))
done

# 5. Log result
{
  echo "# IRQ Affinity Configuration Log"
  echo "# Date: $(date)"
  echo "# NIC: $NIC"
  echo "# IRQs: $IRQS"
} > /var/log/nic-irq-affinity.log

echo "IRQ affinity configuration complete."
